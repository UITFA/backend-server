# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Class {
  class_id: String!
  class_type: String!
  display_name: String!
  lecturer: Lecturer
  participating_student: Int!
  points: [Point!]
  program: String!
  semester: Semester!
  subject: Subject
  total_student: Int!
}

type Comment {
  class: Class
  comment_id: String!
  display_name: String!
  type: String!
}

type CommentQuantity {
  quantity: Int!
  type: String!
}

type Criteria {
  criteria_id: String!
  display_name: String!
  index: Int
  semester: Semester
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Faculty {
  display_name: String!
  faculty_id: String!
  full_name: String
  lecturers: [Lecturer!]
  subjects: [Subject!]
}

input FilterArgs {
  class_type: String
  criteria_id: String
  faculty_id: String
  keyword: String = ""
  lecturer_id: String
  program: String
  semester_id: String
  subjects: [String!]
}

type GroupedPoint {
  average_point: Float!
  id: String!
}

type Lecturer {
  birth_date: DateTime
  classes(class_type: String, criteria_id: String, faculty_id: String, keyword: String = "", lecturer_id: String, program: String, semester_id: String, subjects: [String!]): PaginatedClass!
  display_name: String
  email: String
  faculty: Faculty!
  faculty_id: String
  gender: Boolean
  learning: String
  learning_position: String
  lecturer_id: String!
  mscb: Int
  ngach: String
  phone: String
  points(class_type: String, criteria_id: String, faculty_id: String, keyword: String = "", lecturer_id: String, program: String, semester_id: String, subjects: [String!]): [GroupedPoint!]!
  position: String
  total_point: Float
  username: String
}

type PaginatedClass {
  data: [Class!]!
  meta: PaginatedMetaData!
}

type PaginatedComment {
  data: [Comment!]!
  meta: PaginatedMetaData!
}

type PaginatedCriteria {
  data: [Criteria!]!
  meta: PaginatedMetaData!
}

type PaginatedFaculty {
  data: [Faculty!]!
  meta: PaginatedMetaData!
}

type PaginatedGroupedPoint {
  data: [GroupedPoint!]!
  meta: PaginatedMetaData!
}

type PaginatedLecturer {
  data: [Lecturer!]!
  meta: PaginatedMetaData!
}

type PaginatedMetaData {
  hasNext: Boolean!
  hasPrev: Boolean!
  page: Int!
  size: Int!
  total_item: Int!
  total_page: Int!
}

type PaginatedSubject {
  data: [Subject!]!
  meta: PaginatedMetaData!
}

input PaginationArgs {
  page: Int = 0
  size: Int = 10
}

type Point {
  class: Class
  criteria: Criteria
  max_point: Int!
  point: Int!
  point_id: String!
}

type Program {
  program: String!
}

type Query {
  """View particular class information"""
  class(id: String!): Class

  """List all classes"""
  classes(filter: FilterArgs = {}, pagination: PaginationArgs = {page: 0, size: 10}, sort: SortArgs = {}): PaginatedClass!

  """View particular comment information"""
  comment(id: String!): Comment
  commentQuantity(class_type: String, criteria_id: String, faculty_id: String, keyword: String = "", lecturer_id: String, program: String, semester_id: String, subjects: [String!], type: String!): CommentQuantity!

  """List all comments"""
  comments(class_type: String, criteria_id: String, faculty_id: String, keyword: String = "", lecturer_id: String, page: Int = 0, program: String, semester_id: String, size: Int = 10, subjects: [String!]): PaginatedComment!
  criteria(id: String!): Criteria
  criterias(class_type: String, criteria_id: String, faculty_id: String, keyword: String = "", lecturer_id: String, page: Int = 0, program: String, semester_id: String, size: Int = 10, subjects: [String!]): PaginatedCriteria!

  """List all faculty available"""
  faculties(class_type: String, criteria_id: String, faculty_id: String, keyword: String = "", lecturer_id: String, page: Int = 0, program: String, semester_id: String, size: Int = 10, subjects: [String!]): PaginatedFaculty!

  """Get detail information of a faculty and its lecturer list"""
  faculty(id: String!): Faculty

  """List all points, group by a specific entity"""
  groupedPoints(class_type: String, criteria_id: String, faculty_id: String, groupEntity: String = "Subject", keyword: String = "", lecturer_id: String, page: Int = 0, program: String, semester_id: String, size: Int = 10, subjects: [String!]): PaginatedGroupedPoint!

  """View detail information of a specific lecturer"""
  lecturer(id: String!): Lecturer

  """List all lecturer"""
  lecturers(filter: FilterArgs = {}, pagination: PaginationArgs = {page: 0, size: 10}, sort: SortArgs = {}): PaginatedLecturer!
  programs: [Program!]!

  """List all semester"""
  semesters: [Semester!]
  subject(id: String!): Subject
  subjects(filter: FilterArgs = {}, pagination: PaginationArgs = {page: 0, size: 10}, sort: SortArgs = {}): PaginatedSubject!
}

type Semester {
  display_name: String!
  semester_id: String!
  type: String!
  year: String!
}

input SortArgs {
  isAscending: Boolean = true
  sortField: SortFieldArgs = {}
}

input SortFieldArgs {
  name: String
  type: String! = "name"
}

type Subject {
  display_name: String
  faculty: Faculty
  faculty_id: String!
  points(class_type: String, criteria_id: String, faculty_id: String, keyword: String = "", lecturer_id: String, program: String, semester_id: String, subjects: [String!]): [GroupedPoint!]!
  subject_id: String!
  total_point: Float
}